/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  GameContext,
  GameContextInterface,
} from "../../contracts/GameContext";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newIndex",
        type: "uint256",
      },
    ],
    name: "ContextUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getCurrentContext",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "waitingForOpponentTimeout",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "moveTimeout",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "scoreThreshold",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "roundThreshold",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "ownerTipRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referralTipRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "claimTimeout",
            type: "uint256",
          },
        ],
        internalType: "struct GameContext.ContextData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "waitingForOpponentTimeout",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "moveTimeout",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "scoreThreshold",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "roundThreshold",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "ownerTipRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referralTipRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "claimTimeout",
            type: "uint256",
          },
        ],
        internalType: "struct GameContext.ContextData",
        name: "context",
        type: "tuple",
      },
    ],
    name: "updateContext",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

export class GameContext__factory {
  static readonly abi = _abi;
  static createInterface(): GameContextInterface {
    return new utils.Interface(_abi) as GameContextInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GameContext {
    return new Contract(address, _abi, signerOrProvider) as GameContext;
  }
}
